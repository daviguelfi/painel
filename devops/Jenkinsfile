pipeline {
    agent {
        node {
            label 'linux && nodejs'
        }
    }
    
    // Sempre incluir esse step de options/timeout para não "prender" o agente do Jenkins infinitamente
    options {
        parallelsAlwaysFailFast()
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds()
    }

    parameters {
        choice(
            name: 'DEPLOY_TYPE',
            choices: ['NORMAL', 'FAST'],
            description: 'Fast: Deploy Fortify | Normal: Deploy com todos os passos'
        )

        booleanParam(
            name: 'AUTO_APROVE',
            description: 'Continuar Deployment?',
            defaultValue: false)
    }

    environment {
        PROJECT_NAME="cc-frontend-surgical-center"
        ENVIRONMENT=getEnvironment()
        NODEJS_VERSION = 'lts/gallium'
        PATH = setPath("${env.NODEJS_VERSION}")
    }

    stages {
        stage('Slack Message - START') {
            post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
            steps {
                slackSend (color: '#BADA55', message: "Starting build  ${env.BUILD_URL}\nBranch: ${env.BRANCH_NAME}", channel: '#channel-giro-sala-builds')
            }
        }

        stage('Node Version') {
            steps {
                sh 'node -v'
                sh 'npm -v'
            }
        }
        
        stage('CI') {
            environment {
                //version
                VERSION = getNpmPackageProperty('version')
                REVISION = "${env.BUILD_NUMBER}"

                // Nexus
                NEXUS_IQ_TOKEN = credentials('NEXUS_IQ_TOKEN')

                // Azure e Registry
                AZURE_APP_ID = credentials('azureAppId ')
                AZURE_APP_PASS = credentials('azureAppPass ')
                DOCKER_USER_LOGIN = credentials('DOCKER_USER_LOGIN ')
                DOCKER_USER_PASS = credentials('DOCKER_USER_PASS ') 

                // Sonar
                SONAR_TOKEN = credentials('sonar_token')
                SONAR_URL = credentials('sonar_url')
                PROJECT_KEY = "cc-frontend-surgical-center"
                PATH = "/opt/sonar-scanner-3.3.0.1492-linux/bin:$PATH"    // necessário para achar o Sonar, vamos acertar isso nos agentes

                // Fortify
                DASA_FORTIFY_TOKEN = credentials('dasa_fortify_token')
                FORTIFY_CLIENT_TOKEN = credentials('FORTIFY_CLIENT_TOKEN')
                PRISMA_SECRET = credentials('PRISMA_SECRET')
                PRISMA_KEY = credentials('PRISMA_KEY')
                TYPE_COMPILE_LANG = "npm"
                DASA_FORTIFY_PRODUCT = "CC Giro de Sala"
                DASA_FORTIFY_VERSION = getFortifyVersion()
                PROJECT_NAME="$PROJECT_NAME"
                DASA_FORTIFY_ACCESSIBILITY = "internalnetwork"
                DASA_FORTIFY_DEV_PHASE = "Active"
                DASA_FORTIFY_DATA = "dados_sensiveis_medicos"
                DASA_FORTIFY_URL = "cc-frontend-surgical-center.azr-prd02.dasaexp.io"
                DASA_FORTIFY_EXCLUSIONS = 'node_modules,dist/**,coverage'
                
            }
            stages {             
              	stage('Version Control'){
					steps {
						script {						
							env.VERSAO_ATUAL = getNpmPackageProperty('version');
							env.VERSAO_ATUAL = env.VERSAO_ATUAL.trim();
						
							if(isRelease()){
								versionControlCheck();
								env.VERSION = env.BRANCH_NAME.replace('release/', '').trim();
							}else if(isHotfix()){
								versionControlCheck();
								env.VERSION = env.BRANCH_NAME.replace('hotfix/', '').trim();				
							}else{
								env.VERSION = env.VERSAO_ATUAL
							}														
							env.REVISION = env.BUILD_ID;				
						}	
					}				
			 	} 
                stage('Install NPM dependencies') {
                    steps {
                        script {
                            sh 'rm -rf node_modules'
                            sh 'npm cache clean --force'
                            sh 'npm i --f'
                        }
                    }
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                }
                stage('Unit tests') {
                    when {
                        expression {
                            return isNormalDeploy()
                        }
                    }
                    steps {
                        script {
                            sh 'npm -v'
                            // sh 'npm run test'
                            sh 'npm run test:cov'
                        }
                    }
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                }
                stage('Build App') {
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                    steps {
                        script {
                            sh 'npm run build'
                        }
                    }
                }
                stage('Azure Login') {
                    when {
                        expression {
                            return isDeployBranch()
                        }
                    }
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                    steps {
                        script {
                            sh '''az login -u $AZURE_APP_ID -p $AZURE_APP_PASS --service-principal --tenant $AZURE_TENANT_ID'''
                            sh '''az acr login --name imagesdasa'''
                            if (getEnvironment() != "") {
                                env.IMAGE_VERSION = "$DOCKER_REPOSITORY/${env.ENVIRONMENT}/$PROJECT_NAME:$VERSION-$REVISION"
                            } else {
                                env.IMAGE_VERSION = "$PROJECT_NAME:PR"
                            }
                        }
                    }
                }
                stage ('Build Docker Image App') {
                    when {
                        expression {
                            return isDeployBranch()
                        }
                    }
                    parallel {
                        stage('Build Application') {
                            post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                            steps {
                                script {                                  
                                    sh """
                                            docker build \
                                                -t $IMAGE_VERSION . \
                                                -f ./devops/Dockerfile \
                                                --build-arg VERSION=$VERSION \
                                                --build-arg REVISION=$REVISION \
                                                --build-arg PROJECT_NAME=$PROJECT_NAME \
                                                --build-arg ENVIRONMENT=$ENVIRONMENT \
                                    """
                                }
                            }
                        }
                    }
                }
                stage('SonarQube analysis') {
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }      
                     environment {
                            PATH = "/opt/sonar-scanner-3.3.0.1492-linux/bin:$PATH"
                    }               
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh """
                            sonar-scanner \
                                -Dsonar.projectKey=$PROJECT_NAME \
                                -Dsonar.projectName=$PROJECT_NAME \
                                -Dsonar.projectVersion=$VERSION-$REVISION \
                                -Dsonar.host.url=$SONAR_URL \
                                -Dsonar.token=$SONAR_TOKEN \
                                -Dsonar.sourceEncoding=UTF-8 \
                                -Dsonar.sources="./src" \
                                -Dsonar.test.inclusions="**/*.test.tsx" \
                                -Dsonar.typescript.lcov.reportPaths="coverage/lcov.info" \
                                -Dsonar.javascript.lcov.reportPaths="coverage/lcov.info"
                            """
                        }
                    }
                }
                stage('Quality Gates') {
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }

                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
                stage('Fortify Verify') {
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                    when {
                        expression {
                            return isValidateFortifyStep() && isNormalDeploy()
                        }
                    }
                    steps {
                        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'devops/fortify']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:dasa_desenv/sec-fortify.git']]])
                        script {
                            REPORT_FORTIFY = sh(returnStdout: true, script: "$WORKSPACE/devops/fortify/fortify.sh -v")
                            echo "$REPORT_FORTIFY"
                            slackSend (color: '#FF0000', message: "$REPORT_FORTIFY", channel: '#channel-giro-sala-builds')
                        }
                    }
                }
                stage ('Upload to Registry') {
                    when {
                        expression {
                            return isDeployBranch()
                        }
                    }
                    parallel {
                        stage('Upload Application') {
                            post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                            steps {
                                sh '''docker push $IMAGE_VERSION'''
                            }
                        }
                    }
                }
            }
        }
        stage('Aprove Deployment') {
            when {
                expression {
                    return isDeployBranch()
                }
            }
            post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
            steps {
                script {
                    env.CONTINUE_DEPLOY = true
                    if (isDev()) {
                        echo "Branch de dev sempre deployment"
                        return;
                    }
                    if (params.AUTO_APROVE == true) {
                        echo "Job executado com auto aprove"
                        return;
                    }
                    slackSend (color: '#BADA55', message: "Um build da branch `${env.BRANCH_NAME}` está disponivel para deploy no ambiente de `${env.ENVIRONMENT}`!\nE requer aprovação @here\n ${env.BUILD_URL}", channel: '#channel-giro-sala-builds')
                    try {
                        timeout(time: 1, unit: 'HOURS') {
                            def response = input(
                                submitterParameter: 'USER',
                                id: "Aprove Deployment",
                                parameters: [booleanParam(name: 'CONTINUE',description: 'Aprovar deployment?', defaultValue: true)], message: "Deploy?")
                            env.CONTINUE_DEPLOY = response.CONTINUE
                            echo "${env.CONTINUE_DEPLOY}"
                            if (response.CONTINUE) {
                                slackSend (color: '#BADA55', message: "Continuando o deploy da branch `${env.BRANCH_NAME}`.\nAprovado por `${response.USER}`", channel: '#channel-giro-sala-builds')
                            } else {
                                slackSend (color: '#BADA55', message: "O deploy da branch `${env.BRANCH_NAME}` foi ignorado.\nIgnorado por `${response.USER}`", channel: '#channel-giro-sala-builds')
                            }
                        }
                    } catch(error) {
                        env.CONTINUE_DEPLOY = false
                        slackSend (color: '#FF0000', message: "Timeout da aprovação da branch ${env.BRANCH_NAME}", channel: '#channel-giro-sala-builds')
                    }
                }
            }
        }
        stage('CD') {
            when {
                expression {
                    isDeployment = isDeployBranch() && env.CONTINUE_DEPLOY.toBoolean()
                    return isDeployment
                }
            }
            environment {
            	NAMESPACE='cc-giro-sala'
                // Se quiser deployar na Azure use essas vars:
                KUBECONFIG_DEV = credentials('kubeconfig_girosala_dev')
                KUBECONFIG_HML = credentials('kubeconfig_girosala_hml')
                KUBECONFIG_PRD = credentials('kubeconfig_girosala_prd')
            }
            stages {
                stage('Configure Deploy') {
                    post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                    steps {
                        script{
                            echo "${env.CONTINUE_DEPLOY}"
                            env.KUBECONFIG = ""

                            if (isDev()) {
                                env.KUBECONFIG =  "${env.KUBECONFIG_DEV}"
                            } else if (isRelease()) {
                                env.KUBECONFIG =  "${env.KUBECONFIG_HML}"
                            } else if (isMaster()) {
                                env.KUBECONFIG =  "${env.KUBECONFIG_PRD}"
                            }else{
                                currentBuild.result = 'ABORTED'
                                error('Pipe nao roda para outras branches. Necessário implementar')
                            }
                            sh  '''echo Environment = $ENVIRONMENT'''
                        }
                    }
                }
                stage("Deploy") {
                    parallel {
                        stage('Deploy') {
                            post { failure { script { env.FAILURE_STAGE = "${env.STAGE_NAME}" } } }
                                steps {
                                    sh '''sed 's| \${IMAGE_VERSION}| '"${IMAGE_VERSION}"'|g' -i ./devops/$PROJECT_NAME-$ENVIRONMENT.yaml
                                    kubectl apply --kubeconfig=$KUBECONFIG -f ./devops/$PROJECT_NAME-$ENVIRONMENT.yaml --insecure-skip-tls-verify'''
                                    sh 'kubectl rollout status deployment/$PROJECT_NAME --timeout=10m -n $NAMESPACE --insecure-skip-tls-verify'
                                }
                        }
                    }
                }
            }
        }
    }
}

def isDeployBranch() {
    echo "isDev ${isDev()} / isRelease ${isRelease()} / isMaster ${isMaster()}"
    return isDev() || isRelease() || isMaster()
}


def isValidateFortifyStep() {
    echo "isDev ${isDev()} / isRelease ${isRelease()} / isMaster ${isMaster()}"
    return isDev() || isRelease() || isMaster()
}

def isDev() {
    return env.BRANCH_NAME ==~ /develop/
}
def isRelease() {
    return env.BRANCH_NAME ==~ /release\/(.*)/
}

def isHotfix() {
    return env.BRANCH_NAME ==~ /hotfix\/(.*)/
}

def isMaster() {
    return env.BRANCH_NAME ==~ /main/
}

def getEnvironment() {
    if (isDev()) {
        return "dev"
    } else if (isRelease()) {
        return "hml"
    } else if (isMaster()) {
        return "prd"
    } else {
        return ""
    }
}

def getFortifyVersion() {
    envName = getEnvironment()
    if (envName != ""){
        return envName
    }
    return "1.0.0"
}

boolean isNormalDeploy() {
    return params.DEPLOY_TYPE == 'NORMAL'
}

def versionControlCheck(){
	lastCommit = sh([script: 'git log -1', returnStdout: true])
	if (lastCommit.contains("[skip ci]")) {
		currentBuild.result = 'ABORTED'
		error('Last commit bumped the version, aborting the build to prevent a loop.')
	 } else {
	 	echo('Last commit is not a bump commit, job continues as normal.')
	 }
}

String setPath(String nodejsversion = ' ') {
    return sh(
        script: '. nvmuse ' + nodejsversion,
        returnStdout: true
    ).trim()
}

def getNpmPackageProperty(String prop){
    return sh(
        script: 'cut -d "=" -f 2 <<< $(npm run env | grep npm_package_' + prop + ')',
        returnStdout: true
    ).trim()
}